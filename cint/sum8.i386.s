.data
arr:
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
.byte 0x23, 0x38, 0x21, 0x13, 0x89, 0x93, 0x38, 0x12, 0x43, 0x34, 0x11, 0x33, 0x13, 0x34
len = . - arr
lessthan:
  .string "Less than 0x1000.\n"
len_lt = . - lessthan - 1
greaterthan:
  .string "Greater than 0x1000.\n"
len_gt = . - greaterthan - 1

.text
.globl _sum8
# fib(n) = fib(n-1) + fib(n-2)
_sum8:
  pushl %ebp
  movl  %esp, %ebp
  subl  $0x10, %esp
  movl  $0, -0x8(%ebp)
  movl  $0, -0x4(%ebp)
  movl  $0, -0xc(%ebp)
  jmp   2f
1:movl  -0xc(%ebp), %eax
  addl  0x8(%ebp), %eax
  movzbl (%eax), %ecx
  movzbl %cl, %eax
  movl  $0, %edx
  addl  %eax, -0x8(%ebp)
  adcl  %edx, -0x4(%ebp)
  incl  -0xc(%ebp)
2:movl  -0xc(%ebp), %eax
  cmpl  0xc(%ebp), %eax
  jl    1b
  movl  -0x8(%ebp), %eax
  movl  -0x4(%ebp), %edx
  leave
  ret

.globl _start
_start:
  pushl $len
  pushl $arr
  call  _sum8
  cmpl $0x1000, %eax
  jge  pgreaterthan
  movl $lessthan, %ecx
  movl $len_lt, %edx
  jmp print
pgreaterthan:
  movl $greaterthan, %ecx
  movl $len_gt, %edx
print:
  movl $4, %eax
  movl $1, %ebx
  int $0x80

  #Exit
  movl  $1,%eax
  xorl  %ebx,%ebx
  int $0x80
  ret
