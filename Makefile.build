include config.mak
include $(SRCDIR)/Make.conf
VPATH=$(SRCDIR)
SHELL=/bin/bash

TARS_DIR=$(SRCDIR)/../tars
ITERS?=1 2 #3 4 5 6 7 8 

LINUX=linux-2.6.36.4
PFSCAN=pfscan-1.0
PBZIP2=pbzip2-1.1.6
SYSBENCH=sysbench-0.4.12
DATA_RANDOM=Data-Random-0.06
SPLASH=splash2
HPCC=hpcc-1.5.0b
GRAPH500=graph500-2.1.4
PARSEC=parsec-3.0
MEMCACHED=memcached-1.4.24

OBJS=utils/utils.o
SRCS=$(OBJS:.o=.c)
NTHREADS?=$(shell cat /proc/cpuinfo | grep processor | wc -l)
SNTHREADS?=$(shell cat /proc/cpuinfo | grep processor | wc -l)

SPLASH_PROGS=radix water-spatial water-nsquared volrend raytrace fmm ocean barnes lu-ncont lu-cont fft radiosity cholesky hpcc
RANDOM_FILES = randfile.1.1 randfile.2.1 randfile.2.2 randfile.5.1 randfile.10.2 randfile.10.3 randfile.10.4 randfile.10.5 randfile.10.6 randfile.40.1 randfile.100.2 randfile.200.1 randfile 200.1 randfile.400.1

CINT_GCC_CLANG_ICC_PROG_NAMES = intermittent array_cmpb array_cmpw array_cmpl array_setb array_setw array_setl count_ones32 array_findb array_findw array_findl array_rfindb array_rfindw array_rfindl my_strlen my_strrchr
CINT_GCC_CLANG_ICC_PROGS=$(addprefix cint/, $(CINT_GCC_CLANG_ICC_PROG_NAMES))
CINT_PROG_NAMES=ctests
CINT_PROGS=$(addprefix cint/, $(CINT_PROG_NAMES))
CINT_PROGS_GCC=$(CINT_PROGS) $(CINT_GCC_CLANG_ICC_PROGS)
CINT_PROGS_CLANG=$(CINT_PROGS) $(CINT_GCC_CLANG_ICC_PROGS)
CINT_PROGS_ICC=$(CINT_PROGS) $(CINT_GCC_CLANG_ICC_PROGS)
CINT_PROGS_CCOMP=$(CINT_PROGS)

EMIT_RELOCS_FLAG=-Wl,--emit-relocs
COMPCERT_DIR=$(build)/installs/$(COMPCERT)
COMPCERT_INSTALL=$(COMPCERT_DIR)-install
CCOMP_I386=$(COMPCERT_INSTALL)/bin/ccomp -fvararg-calls -fno-fpu -funprototyped -fstruct-return -fno-tailcalls -L$(COMPCERT_INSTALL)/lib/compcert $(EMIT_RELOCS_FLAG)

CINT_GCC_O0_PROGS = $(addsuffix .gcc.O0, $(CINT_PROGS_GCC))
CINT_GCC_O2_PROGS = $(addsuffix .gcc.O2, $(CINT_PROGS_GCC))
CINT_GCC_O3_PROGS = $(addsuffix .gcc.O3, $(CINT_PROGS_GCC))
CINT_HOSTGCC4_8_O0_PROGS = $(addsuffix .gcc48.O0, $(CINT_PROGS_GCC))
CINT_HOSTGCC4_8_O2_PROGS = $(addsuffix .gcc48.O2, $(CINT_PROGS_GCC))
CINT_HOSTGCC4_8_O3_PROGS = $(addsuffix .gcc48.O3, $(CINT_PROGS_GCC))
CINT_CLANG3_6_O0_PROGS = $(addsuffix .clang36.O0, $(CINT_PROGS_CLANG))
CINT_CLANG3_6_O2_PROGS = $(addsuffix .clang36.O2, $(CINT_PROGS_CLANG))
CINT_CLANG3_6_O3_PROGS = $(addsuffix .clang36.O3, $(CINT_PROGS_CLANG))
CINT_ICC_O0_PROGS = $(addsuffix .icc.O0, $(CINT_PROGS_ICC))
CINT_ICC_O2_PROGS = $(addsuffix .icc.O2, $(CINT_PROGS_ICC))
CINT_ICC_O3_PROGS = $(addsuffix .icc.O3, $(CINT_PROGS_ICC))
#CINT_ICC_O2U_PROGS = $(addsuffix .icc.O2U, $(CINT_PROGS_ICC))
CINT_CCOMP_O2_PROGS = $(addsuffix .ccomp.O2, $(CINT_PROGS_CCOMP))
CINT_CCOMP_O0_PROGS = $(addsuffix .ccomp.O0, $(CINT_PROGS_CCOMP))
CINT_I386_HOSTGCC4_8_O0_PROGS = $(addsuffix .i386, $(CINT_HOSTGCC4_8_O0_PROGS))
CINT_I386_HOSTGCC4_8_O2_PROGS = $(addsuffix .i386, $(CINT_HOSTGCC4_8_O2_PROGS))
CINT_I386_HOSTGCC4_8_O3_PROGS = $(addsuffix .i386, $(CINT_HOSTGCC4_8_O3_PROGS))
CINT_I386_CLANG3_6_O0_PROGS = $(addsuffix .i386, $(CINT_CLANG3_6_O0_PROGS))
CINT_I386_CLANG3_6_O2_PROGS = $(addsuffix .i386, $(CINT_CLANG3_6_O2_PROGS))
CINT_I386_CLANG3_6_O3_PROGS = $(addsuffix .i386, $(CINT_CLANG3_6_O3_PROGS))
CINT_I386_ICC_O0_PROGS = $(addsuffix .i386, $(CINT_ICC_O0_PROGS))
CINT_I386_ICC_O2_PROGS = $(addsuffix .i386, $(CINT_ICC_O2_PROGS))
CINT_I386_ICC_O3_PROGS = $(addsuffix .i386, $(CINT_ICC_O3_PROGS))
CINT_I386_ICC_O2U_PROGS = $(addsuffix .i386, $(CINT_ICC_O2U_PROGS))
CINT_I386_CCOMP_O0_PROGS = $(addsuffix .i386, $(CINT_CCOMP_O0_PROGS))
CINT_I386_CCOMP_O2_PROGS = $(addsuffix .i386, $(CINT_CCOMP_O2_PROGS))
CINT_I386_ASPROGS_NAMES = hello_world.AS.i386 fibo.AS.i386 one_bbl.AS.i386 sum8.AS.i386 \
               image_diff.AS.i386 fibo_rec.AS.i386 one_bbl_unroll_loops.AS.i386\
               one_bbl_stack_analysis.AS.i386 link_list_double.AS.i386
CINT_I386_ASPROGS = $(addprefix cint/, $(CINT_I386_ASPROGS_NAMES))
CINT_PPC_ASPROGS_NAMES = hello_world.AS.ppc fibo.AS.ppc one_bbl.AS.ppc ascom.AS.ppc
CINT_PPC_ASPROGS = $(addprefix cint/, $(CINT_PPC_ASPROGS_NAMES))
CINT_ARM_ASPROGS_NAMES = hello_world.AS.arm fibo_rec.AS.arm
CINT_ARM_ASPROGS = $(addprefix cint/, $(CINT_ARM_ASPROGS_NAMES))


CINT_PPC_O0_PROGS = $(addsuffix .ppc, $(CINT_GCC_O0_PROGS))
CINT_PPC_O2_PROGS = $(addsuffix .ppc, $(CINT_GCC_O2_PROGS))
CINT_PPC_O2_PROGS = $(addsuffix .ppc, $(CINT_GCC_O2U_PROGS))
CINT_PPC_LITTLE_O0_PROGS = $(addsuffix .le.ppc, $(CINT_GCC_O0_PROGS))
CINT_PPC_LITTLE_O2_PROGS = $(addsuffix .le.ppc, $(CINT_GCC_O2_PROGS))
CINT_PPC_LITTLE_O2_PROGS = $(addsuffix .le.ppc, $(CINT_GCC_O2U_PROGS))


CINT_PPC_PROGS = $(CINT_PPC_O0_PROGS) $(CINT_PPC_O2_PROGS) $(CINT_PPC_O2U_PROGS) $(CINT_PPC_ASPROGS) \
            #$(PPC_LITTLE_O0_PROGS) $(PPC_LITTLE_O2_PROGS) $(PPC_LITTLE_O2U_PROGS)
#X86_PROGS = $(X86_O0_PROGS) $(X86_O2_PROGS) $(X86_O2U_PROGS)
CINT_I386_PROGS = \
  $(CINT_I386_HOSTGCC4_8_O0_PROGS) \
  $(CINT_I386_HOSTGCC4_8_O2_PROGS) \
  $(CINT_I386_HOSTGCC4_8_O3_PROGS) \
  #$(CINT_I386_CLANG3_6_O0_PROGS) \
  $(CINT_I386_CLANG3_6_O2_PROGS) \
  $(CINT_I386_CLANG3_6_O3_PROGS) \
  $(CINT_I386_CCOMP_O0_PROGS) \
  $(CINT_I386_CCOMP_O2_PROGS) \
  $(CINT_I386_ASPROGS) \
  #$(CINT_I386_ICC_O0_PROGS) \
  #$(CINT_I386_ICC_O2_PROGS) \
  #$(CINT_I386_ICC_O3_PROGS)

cint: $(CINT_I386_PROGS)

help:
	echo "Make targets: $(MAKE_TARGETS)"

pbzip2_prepare: $(RANDOM_FILES)

pfscan_prepare: $(RANDOM_FILES)

build: mytime $(SPLASH)/codes/Makefile.config microbench_build sysbench_build pfscan_build pbzip2_build linux_src hpcc_build graph500_build parsec_build memcached_build

linux_src: $(LINUX)/Makefile

$(LINUX)/Makefile: $(TARS_DIR)/$(LINUX).tar.bz2
	tar xf $<
	touch $@

microbench_build: lmem false_share noshare sharedvar

microbench_run: lmem_run false_share_run noshare_run sharedvar_run

splashrun::
	echo "=====\nNEW RUN\n=====\n\n" >> profile.results
	for prog in $(SPLASH_PROGS); do \
		$(MAKE) $$prog; \
	done

$(SPLASH)/codes/Makefile.config: $(TARS_DIR)/$(SPLASH).tbz2
	tar xjf $(TARS_DIR)/$(SPLASH).tbz2
	mv $(SPLASH)/codes/Makefile.config $(SPLASH)/codes/Makefile.config.bak
	echo "include $(SRCDIR)/config-host.mak" > $(SPLASH)/codes/Makefile.config
	cat $(SPLASH)/codes/Makefile.config.bak >> $(SPLASH)/codes/Makefile.config
	cd $(SPLASH)/codes/kernels/radix && make clean && make && cd -
	cd $(SPLASH)/codes/kernels/lu/contiguous_blocks && make clean && make && cd -
	cd $(SPLASH)/codes/kernels/lu/non_contiguous_blocks && make clean && make && cd -
	cd $(SPLASH)/codes/kernels/cholesky && make clean && make && cd -
	cd $(SPLASH)/codes/apps/barnes && make clean && make && cd -
	cd $(SPLASH)/codes/apps/fmm && make clean && make && cd -
	cd $(SPLASH)/codes/apps/ocean/contiguous_partitions && make clean && make && cd -
	cd $(SPLASH)/codes/apps/radiosity/glibdumb && make clean && make && cd -
	cd $(SPLASH)/codes/apps/radiosity/glibps && make clean && make && cd -
	cd $(SPLASH)/codes/apps/radiosity && make clean && make && cd -
	cd $(SPLASH)/codes/apps/raytrace && make clean && make && cd -
	cd $(SPLASH)/codes/apps/volrend && make clean && make && cd -
	cd $(SPLASH)/codes/apps/water-nsquared && make clean && make && cd -
	cd $(SPLASH)/codes/apps/water-spatial && make clean && make && cd -


#the -m parameter could be set to 26 or even 28 on larger machine
fft:: $(SPLASH)/codes/Makefile.config mytime
	cd $(SPLASH)/codes/kernels/fft && make clean && make && cd -
	n=1 ; while [[ $$n -le $(SNTHREADS) ]] ; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  for i in $(ITERS); do ./mytime FFT.$$n `pwd`/$(SPLASH)/codes/kernels/fft/FFT -p $$n -m 16 > /dev/null; done; \
          ((n = n * 2)); \
	done

radix:: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(SNTHREADS) ]] ; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  for i in $(ITERS); do ./mytime RADIX.$$n `pwd`/$(SPLASH)/codes/kernels/radix/RADIX -p $$n -n 33554432 > /dev/null; done; \
          ((n = n * 2)); \
	done

lu-cont:: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(SNTHREADS) ]] ; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  for i in $(ITERS); do ./mytime LU-CONT.$$n `pwd`/$(SPLASH)/codes/kernels/lu/contiguous_blocks/LU -p $$n -n 2048 > /dev/null; done; \
          ((n = n * 2)); \
	done

lu-ncont:: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(SNTHREADS) ]] ; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  for i in $(ITERS); do ./mytime LU-NCONT.$$n `pwd`/$(SPLASH)/codes/kernels/lu/non_contiguous_blocks/LU -p $$n -n 2048 > /dev/null; done; \
          ((n = n * 2)); \
	done

cholesky:: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(SNTHREADS) ]] ; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  for i in $(ITERS); ./mytime CHOLESKY.$$n `pwd`/$(SPLASH)/codes/kernels/cholesky/CHOLESKY -p $$n; done; \
          ((n = n * 2)); \
	done

barnes:: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(SNTHREADS) ]] ; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  echo > in && echo 16384 >> in && echo 123 >> in && echo NULL >> in && echo 0.025 >> in && echo 0.05 >> in && echo 1.0 >> in && echo 2.0 >> in && echo 4 >> in && echo 0.075 >> in && echo 0.25 >> in && echo $$n >> in; \
	  for i in $(ITERS); do $(build)/mytime BARNES.$$n ./param `pwd`/$(SPLASH)/codes/apps/barnes/BARNES in > /dev/null 2>/dev/null; done; \
          ((n = n * 2)); \
	done

fmm:: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(SNTHREADS) ]]; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  echo "two cluster" > in && echo plummer >> in && echo 16384 >> in && echo 1e-6 >> in && echo $$n >> in && echo 5 >> in && echo .025 >> in && echo 0.0 >> in && echo "cost zones" >> in; \
	  for i in $(ITERS); do $(build)/mytime FMM.$$n ./param `pwd`/$(SPLASH)/codes/apps/fmm/FMM  in > /dev/null 2>/dev/null; done; \
          ((n = n * 2)); \
	done

#can set -n4098 for larger machines
ocean:: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(SNTHREADS) ]]; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  for i in $(ITERS); do $(build)/mytime OCEAN.$$n `pwd`/$(SPLASH)/codes/apps/ocean/contiguous_partitions/OCEAN -n258 -p$$n -e1e-07 -r20000 -t28800 > /dev/null; done; \
          ((n = n * 2)); \
	done

radiosity: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(NTHREADS) ]]; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  for i in $(ITERS); do $(build)/mytime RADIOSITY.$$n `pwd`/$(SPLASH)/codes/apps/radiosity/RADIOSITY -p $$n -batch -room; done; \
          ((n = n * 2)); \
	done

raytrace: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(NTHREADS) ]]; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  for i in $(ITERS); do cd `pwd`/$(SPLASH)/codes/apps/raytrace && $(build)/mytime RAYTRACE.$$n ./RAYTRACE -p $$n inputs/balls4.env > /dev/null 2>/dev/null && cd -; done; \
          ((n = n * 2)); \
	done

volrend: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(NTHREADS) ]]; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  for i in $(ITERS); do cd `pwd`/$(SPLASH)/codes/apps/volrend && $(build)/mytime VOLREND.$$n ./VOLREND $$n inputs/head > /dev/null && cd -; done; \
          ((n = n * 2)); \
	done

water-nsquared: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(NTHREADS) ]]; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  echo "  1.5e-16   512  300   6" > in && echo " -1       3000     3  0" >> in && echo "$$n 6.212752" >> in; \
	  for i in $(ITERS); do cd `pwd`/$(SPLASH)/codes/apps/water-nsquared && $(build)/mytime WATER-NSQUARED.$$n $(build)/param ./WATER-NSQUARED  $(build)/in > /dev/null 2>/dev/null && cd -; done; \
          ((n = n * 2)); \
	done

water-spatial: $(SPLASH)/codes/Makefile.config
	n=1 ; while [[ $$n -le $(NTHREADS) ]] ; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  echo "  1.5e-17   512  50   6" > in && echo " 0       0     3  0" >> in && echo "$$n 6.212752" >> in; \
	  for i in $(ITERS); do cd `pwd`/$(SPLASH)/codes/apps/water-spatial && $(build)/mytime WATER-SPATIAL.$$n $(build)/param ./WATER-SPATIAL $(build)/in > /dev/null 2>/dev/null && cd -; done \
          ((n = n * 2)); \
	done

lmem false_share noshare sharedvar: %: $(SRCDIR)/%.c
	gcc -o $@ $< -lpthread

sharedvar_run:: sharedvar mytime microbench_run_threads_iters.pl
	perl -I$(SRCDIR) $(SRCDIR)/microbench_run_threads_iters.pl sharedvar $(NTHREADS) $(ITERS)

false_share_run::false_share mytime microbench_run_threads_iters.pl
	perl -I$(SRCDIR) $(SRCDIR)/microbench_run_threads_iters.pl false_share $(NTHREADS) $(ITERS)

lmem_run:: lmem mytime microbench_run_threads_iters.pl
	perl -I$(SRCDIR) $(SRCDIR)/microbench_run_threads_iters.pl lmem $(NTHREADS) $(ITERS)

noshare_run:: noshare mytime microbench_run_threads_iters.pl
	perl -I$(SRCDIR) $(SRCDIR)/microbench_run_threads_iters.pl noshare $(NTHREADS) $(ITERS)

pfscan_build: $(PFSCAN)/pfscan

$(PFSCAN)/pfscan: $(TARS_DIR)/$(PFSCAN).tar.gz
	tar xzf $(TARS_DIR)/$(PFSCAN).tar.gz && cd $(PFSCAN) && make lnx && cd ..

pbzip2_build: $(PBZIP2)/pbzip2

$(PBZIP2)/pbzip2: $(TARS_DIR)/$(PBZIP2).tar.gz
	tar xzf $(TARS_DIR)/$(PBZIP2).tar.gz && cd $(PBZIP2) && make && cd ..

pfscan_run:: $(PFSCAN)/pfscan mytime $(RANDOM_FILES) 
	n=1 ; while [[ $$n -le $(NTHREADS) ]]; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  for i in $(ITERS); do ./mytime pfscan.$$n $(PFSCAN)/pfscan -n $$n foobar $(RANDOM_FILES); done; \
          ((n = n * 2)); \
	done

pbzip2_run:: $(PBZIP2)/pbzip2 mytime $(RANDOM_FILES)
	n=1 ; while [[ $$n -le $(NTHREADS) ]]; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
          for i in $(ITERS); do ./mytime pbzip2.$$n $(PBZIP2)/pbzip2 -k -p $$n $(RANDOM_FILES); done; \
          ((n = n * 2)); \
	done

lincompile_run:: $(LINUX)/Makefile
	for i in $(ITERS); do \
	  n=1 ; while [[ $$n -le $(NTHREADS) ]]; do \
	    cd $(LINUX) && make clean && ./mytime lincompile make -s -j $(NTHREADS); \
            ((n = n * 2)); \
	  done \
	done
	    #cd $(LINUX) && make clean && /usr/bin/time -v -o lincompile_$(NTHREADS)_is_bt_$(BTKERNEL).$$i make -s -j $(NTHREADS); \


sysbench_build:$(SYSBENCH)/sysbench/sysbench

$(SYSBENCH)/sysbench/sysbench:
	#sudo apt-get install mysql-server libmysqlclient15-dev
	tar xzf $(TARS_DIR)/$(SYSBENCH).tar.gz
	cd $(SYSBENCH) && (autoreconf -fiv || /bin/true) && ./configure && make
	expect $(SRCDIR)/mysql_prepare_for_sysbench.exp

sysbench_run:: $(SYSBENCH)/sysbench/sysbench
	$(SYSBENCH)/sysbench/sysbench --test=oltp --mysql-user=root --mysql-password=root --mysql-db=test --mysql-table-engine=myisam --oltp-table-size=4000000 --mysql-socket=/var/run/mysqld/mysqld.sock prepare
	n=1 ; while [[ $$n -le $(NTHREADS) ]]; do \
	  echo "nthreads=$$n" >> $(build)/profile.results; \
	  for i in $(ITERS); do ./mytime sysbench.$$n $(SYSBENCH)/sysbench/sysbench --num-threads=$$n --mysql-user=root --mysql-password=root --mysql-db=test --max-requests=100000 --test=oltp --oltp-table-size=4000000 --mysql-socket=/var/run/mysqld/mysqld.sock run; done; \
          ((n = n * 2)); \
	done

hpcc_build: $(HPCC)/hpcc

$(HPCC)/hpcc: $(TARS_DIR)/$(HPCC).tar.gz
	#sudo apt-get install gfortran mpi
	tar xzf $(TARS_DIR)/$(HPCC).tar.gz
	patch -p0 < $(SRCDIR)/$(HPCC).patch
	cd $(HPCC) && make arch=intel && cd ..
	lamboot

hpcc_run:: $(HPCC)/hpcc
	#TODO: implement proper reporting of results in profile.results
	cd $(HPCC) && ./mytime hpcc.1 ./hpcc && cd ..

graph500_build: $(GRAPH500)/make-edgelist

$(GRAPH500)/make-edgelist: $(TARS_DIR)/$(GRAPH500).tar.bz2
	tar xf $(TARS_DIR)/$(GRAPH500).tar.bz2
	patch -p0 < $(SRCDIR)/$(GRAPH500).patch
	cd $(GRAPH500) && make && cd ..

graph500_run::
	#TODO: implement proper reporting of results in profile.results
	cd $(GRAPH500) && ./mytime graph500.1 ./make-edgelist > out && cd ..
	cd $(GRAPH500) && make clean && CPPFLAGS="-DUSE_MMAP_LARGE -DUSE_MMAP_LARGE_EXT" make && ./mytime graph500.1.hugepages ./make-edgelist > out && cd .. #use huge-pages

parsec_build: $(PARSEC)/bin/parsecmgmt

$(PARSEC)/bin/parsecmgmt: $(TARS_DIR)/$(PARSEC).tar.gz
	tar xf $(TARS_DIR)/$(PARSEC).tar.gz
	touch $@
	$(PARSEC)/bin/parsecmgmt -a build -p canneal
	$(PARSEC)/bin/parsecmgmt -a build -p streamcluster


streamcluster_run:: $(PARSEC)/bin/parsecmgmt
	#TODO: implement proper reporting of results in profile.results
	#cd $(PARSEC) && ./bin/parsecmgmt -a run -p streamcluster -i native && cd ..
	cd $(PARSEC) && ./mytime streamcluster.1 ./bin/parsecmgmt -a run -p streamcluster -n 1 -i native && cd ..
	cd $(PARSEC) && ./mytime streamcluster.2 ./bin/parsecmgmt -a run -p streamcluster -n 2 -i native && cd ..

canneal_run:: $(PARSEC)/bin/parsecmgmt
	cd $(PARSEC) && ./mytime canneal.1 ./bin/parsecmgmt -a run -p canneal -n 1 -i native && cd ..
	cd $(PARSEC) && ./mytime canneal.2 ./bin/parsecmgmt -a run -p canneal -n 2 -i native && cd ..

memcached_build: $(MEMCACHED)/memcached

$(MEMCACHED)/memcached: $(TARS_DIR)/$(MEMCACHED).tar.gz
	#sudo apt-get install libevent-dev libevent1-dev
	tar xf $(TARS_DIR)/$(MEMCACHED).tar.gz
	cd $(MEMCACHED) && ./configure && make && cd ..

memcached_run:: $(MEMCACHED)/memcached
	cd $(MEMCACHED) && ./memcached -d -m 256 -p 11211 && cd ..

mytime: mytime.o utils/utils.o
	$(CC) $(CFLAGS) -o $@ $< $(OBJS)

param: input_param.o
	$(CC) -o param input_param.o

$(RANDOM_FILES): %: gen_randfile.pl
	tar xzf $(TARS_DIR)/$(DATA_RANDOM).tar.gz
	perl -I$(SRCDIR) -I$(DATA_RANDOM)/lib $(SRCDIR)/gen_randfile.pl $@

clean::
	rm -rf *.o utils/*.o mytime $(SYSBENCH) $(PFSCAN) $(PBZIP2) $(SPLASH) $(HPCC) $(GRAPH500) $(PARSEC) $(MEMCACHED) $(LINUX)

distclean:: clean
	rm -f $(RANDOM_FILES)

include $(SRCDIR)/Makefile.crosstool
include $(SRCDIR)/Makefile.compcert
include $(SRCDIR)/Makefile.cint

-include $(OBJS:.o=.d)
